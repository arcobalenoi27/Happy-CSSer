{"version":3,"sources":["_typography.sass","_layout.sass","_mixins.sass","../../node_modules/sass-mq/_mq.scss","base/_base.sass","_variable.sass","all.sass","page/_index.sass"],"names":[],"mappings":"AAKA;EACE,qGAAqG;EACrG,iBAAiB;EACjB,mBAAmB,EAAG;;ACRxB;EAEE,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,gBAAgB,EAGO;EARzB;ICiEI,YAAY;IACZ,eAAe;IACf,YAAY,EAAG;EC6JX;IFhOR;MAQI,gBAAgB,EAAK,EAAA;;AGRzB;EACE,uBAAuB,EAAG;;AAE5B;EAEE,+BAA+B;EAC/B,oCAAoC;EACpC,mCAAmC;EACnC,eCUmB,EDNF;EATnB;IAQI,UAAU;IACV,UAAU,EAAG;;AAEjB;EACE,gBAAgB,EAAG;;AEDrB,+CAA+C;AAC/C,6CAA6C;ACP7C;EACE,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,kBAAkB;EAClB,yBAAwB;MAAxB,sBAAwB;UAAxB,wBAAwB;EACxB,0BAAoB;MAApB,uBAAoB;UAApB,oBAAoB;EACpB,wBAbsB,EAagB;;AAExC;EACE,mBAAmB;EACnB,aAXiC;EAYjC,aAfqB;EAgBrB,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,0BAA+B;MAA/B,uBAA+B;UAA/B,+BAA+B,EA0BwB;EA/BzD;IAQI,YAAY;IACZ,mBAAmB;IACnB,qBAAS;IACT,wBAAU;IACV,aAAuB;IACvB,YAAyB;IACzB,mBAAmB;IACnB,mEAA2B;IAA3B,2DAA2B;IAC3B,0BAAY;YAAZ,kBAAY,EAAQ;EAhBxB;IAmBI,mBAAmB;IACnB,YAAY;IACZ,YAjCmB;IAkCnB,aAlCmB;IAmCnB,mBAAmB;IACnB,mEAA2B;IAA3B,2DAA2B;IAC3B,0BAAY;YAAZ,kBAAY;IACZ,uBAAuB;IACvB,mDAA0C;YAA1C,2CAA0C,EAIS;IA/BvD;MA8BM,oCAA4G;cAA5G,4BAA4G;MAC5G,qDAA4C;cAA5C,6CAA4C,EAAG;;AAErD;EACE;IACE,mCAAqB;YAArB,2BAAqB,EAAA;EACvB;IACE,oCAAqB;YAArB,4BAAqB,EAAA,EAAA;;AAJzB;EACE;IACE,mCAAqB;YAArB,2BAAqB,EAAA;EACvB;IACE,oCAAqB;YAArB,4BAAqB,EAAA,EAAA;;AAEzB;EACE;IACE,gDAAkC;YAAlC,wCAAkC,EAAA;EACpC;IACE,iDAAkC;YAAlC,yCAAkC,EAAA;EACpC;IACE,iDAAoC;YAApC,yCAAoC,EAAA;EACtC;IACE,mDAAoC;YAApC,2CAAoC,EAAA,EAAA;;AARxC;EACE;IACE,gDAAkC;YAAlC,wCAAkC,EAAA;EACpC;IACE,iDAAkC;YAAlC,yCAAkC,EAAA;EACpC;IACE,iDAAoC;YAApC,yCAAoC,EAAA;EACtC;IACE,mDAAoC;YAApC,2CAAoC,EAAA,EAAA;;AD5CxC,4CAA4C","file":"all.css","sourcesContent":["%helvetica {\n  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n  font-weight: 400;\n  font-style: normal; }\n\n%system-font {\n  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', 'PingFang TC', 'Microsoft JhengHei', sans-serif;\n  font-weight: 400;\n  font-style: normal; }\n",".container {\n  @include pie-clearfix;\n  position: relative;\n  max-width: 1136px;\n  margin: 0 auto;\n  padding: 0 12px;\n\n  @include tablet {\n    padding: 0 24px; } }\n","// rwd alias ----------------------------\n\n@mixin tablet {\n  @include mq(tablet) {\n    @content; } }\n\n@mixin desktop {\n  @include mq(desktop) {\n    @content; } }\n\n@mixin landscape {\n  @include mq($and: $mq-landscape) {\n    @content; } }\n\n@mixin retina {\n  @include mq($and: $mq-hidpi) {\n    @content; } }\n\n// image ----------------------------\n\n// asset-related functions from: https://github.com/assetsjs/postcss-assets\n\n@mixin retina-image($url, $ext) {\n  $image: $url + $ext;\n  $size: size($image);\n  width: width($image);\n  height: height($image);\n  background-image: resolve($image);\n  @include retina {\n    background-image: resolve($url + '@2x' + $ext);\n    background-size: $size; } }\n\n@mixin retina-background($url, $ext, $bg-size: cover) {\n  $image: $url + $ext;\n  background-image: resolve($image);\n  background-size: $bg-size;\n  @include retina {\n    background-image: resolve($url + '@2x' + $ext);\n    background-size: $bg-size; } }\n\n// debug ----------------------------\n\n@mixin xx($opacity: .2) {\n  outline: 1px solid rgba(red, $opacity); }\n\n// alias ----------------------------\n\n@mixin input-placeholder-color($color) {\n  &::-webkit-input-placeholder {\n    color: $color;\n    -webkit-font-smoothing: antialiased; }\n\n  &:-moz-placeholder {\n    color: $color; }\n\n  &::-moz-placeholder {\n    color: lighten($color, 10%); }\n\n  &:-ms-input-placeholder {\n    color: $color; } }\n\n// layout ----------------------------\n\n@mixin pie-clearfix {\n  &:after {\n    content: '';\n    display: table;\n    clear: both; } }\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","*, *:before, *:after {\n  box-sizing: border-box; }\n\nbody {\n  @extend %system-font;\n  -webkit-text-size-adjust: 100%;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  color: $color-black;\n\n  &:before {\n    top: auto;\n    bottom: 0; } }\n\nimg {\n  max-width: 100%; }\n","// RWD\n// ----------------------------------------\n\n$mq-responsive: true;\n$mq-breakpoints: map-get($theme, breakpoints);\n\n@if $env == 'dev' {\n  $mq-show-breakpoints: (phone, tablet, desktop, wide) !global; }\n\n// edit breakpoints in /config/shared.yaml\n// to see more options -> https://github.com/sass-mq/sass-mq\n$mq-landscape: '(orientation: landscape)';\n$mq-hidpi: '(-webkit-min-device-pixel-ratio: 1.3), (min-resolution: 120dpi), (min-resolution: 1.3dppx)';\n\n$xx: rgba(red, .1);\n\n$color-blue: #24bbea;\n$color-blue-dark: #1fa7d0;\n$color-black: #373737;\n$color-black-light: #707070;\n$color-gray: #9a9a9a;\n$color-gray-light: #e7e7e7;\n$color-red: #ef472f;\n$color-red-dark: #bd3623;\n","// variable from sass.coffee & gulp-preprocess\n$env: 'prod';\n\n@import 'math';\n// @import 'normalize'\n@import 'shared-config';\n@import 'variable';\n@import 'mixins';\n@import 'mq';\n@import 'typography';\n@import 'layout';\n@import 'util';\n@import 'base/_base.sass';\n\n/* No files to import found in component//** *///* */\n/* No files to import found in partial//** *///* */\n@import 'page/_index.sass';\n\n/* No files to import found in vendor//** *///* */\n","$color-background: black;\n$color-light-white: white;\n$color-light-blue: #4dc6f6;\n$loader-ball-size: 24px;\n$loader-ball-amount: 3;\n$loader-ball-gap: 2;\n$ai-loader-width: $loader-ball-size * ( $loader-ball-amount + $loader-ball-gap * ($loader-ball-amount - 1));\n\nbody {\n  display: flex;\n  min-height: 100vh;\n  justify-content: center;\n  align-items: center;\n  background-color: $color-background; }\n\n.ai-loader {\n  position: relative;\n  width: $ai-loader-width;\n  height: $loader-ball-size;\n  display: flex;\n  justify-content: space-between;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: calc(50% - #{$loader-ball-size / 8});\n    left: calc(50% - #{$ai-loader-width * 1.5});\n    width: $ai-loader-width * 3;\n    height: $loader-ball-size / 4;\n    border-radius: 50%;\n    background: radial-gradient(circle, $color-light-white 0%, $color-light-blue 70%);\n    filter: blur(1px); }\n\n  .ball {\n    position: relative;\n    z-index: 10;\n    width: $loader-ball-size;\n    height: $loader-ball-size;\n    border-radius: 50%;\n    background: radial-gradient(circle, $color-light-white 0%, $color-light-blue 70%);\n    filter: blur(2px);\n    mix-blend-mode: screen;\n    animation: ball-move 1s steps(60) infinite;\n\n    &:last-child {\n      transform-origin: -((($loader-ball-amount + $loader-ball-gap * ($loader-ball-amount - 1)) * 50%) - 100%) 50%;\n      animation: ball-rotate 1s steps(60) infinite; } } }\n\n@keyframes ball-move {\n  from {\n    transform: translateX(50%); }\n  to {\n    transform: translateX(($loader-ball-gap + 1) * 100% + 50%); } }\n\n@keyframes ball-rotate {\n  0% {\n    transform: rotate(0deg) translateX(50%); }\n  25% {\n    transform: rotate(0deg) translateX(100%); }\n  75% {\n    transform: rotate(180deg) translateX(0%); }\n  100% {\n    transform: rotate(180deg) translateX(-50%); } }\n"]}